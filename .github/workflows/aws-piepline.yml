name: AWS Pipeline

on:
  push:
    paths:
      - 'frontend/**'
      - 'terraform/aws/**'
      - 'backend/**'
  workflow_dispatch:

env:
  TF_VAR_aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws-region: ${{ secrets.AWS_REGION }}
  TF_VAR_root-domain: ${{ secrets.ROOT_DOMAIN }}
  TF_VAR_subdomain-name: ${{ secrets.PROJECT_NAME }}
  TF_VAR_bucket-name: ${{ secrets.FRONTEND_S3_BUCKET_NAME }}
  TF_VAR_project-name: ${{ secrets.PROJECT_NAME }}
  TF_VAR_environment: 'dev'
  TF_VAR_google_cloud_topic_name: ${{ secrets.GOOGLE_CLOUD_TOPIC_NAME }}
permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Lambda Functions
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Auth Lambda
      # - name: Install auth lambda dependencies
      #   working-directory: backend/lambdas/auth
      #   run: npm ci

      # - name: Lint auth lambda code
      #   working-directory: backend/lambdas/auth
      #   run: npm run lint

      - name: Build and package auth lambda
        working-directory: backend/lambdas/auth
        run: |
          npm run package
          if [ ! -f auth-lambda.zip ]; then
            echo "Error: auth-lambda.zip was not created"
            exit 1
          fi

      - name: Upload auth lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: auth-lambda
          path: backend/lambdas/auth/auth-lambda.zip
          retention-days: 5

      # User Data Lambda
      # - name: Install user data lambda dependencies
      #   working-directory: backend/lambdas/user-data
      #   run: npm ci

      # - name: Lint user data lambda code
      #   working-directory: backend/lambdas/user-data
      #   run: npm run lint

      - name: Build and package user data lambda
        working-directory: backend/lambdas/user-data
        run: |
          npm run package
          if [ ! -f user-data-lambda.zip ]; then
            echo "Error: user-data-lambda.zip was not created"
            exit 1
          fi

      - name: Upload user data lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: user-data-lambda
          path: backend/lambdas/user-data/user-data-lambda.zip
          retention-days: 5

      # Connection Lambda
      # - name: Install connection lambda dependencies
      #   working-directory: backend/lambdas/connection
      #   run: npm ci

      # - name: Lint connection lambda code
      #   working-directory: backend/lambdas/connection
      #   run: npm run lint

      - name: Build and package connection
        working-directory: backend/lambdas/connection
        run: |
          npm run package
          if [ ! -f connection-lambda.zip ]; then
            echo "Error: connection-lambda.zip was not created"
            exit 1
          fi

      - name: Upload connection lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: connection-lambda
          path: backend/lambdas/connection/connection-lambda.zip
          retention-days: 5

      # Websocket Lambda
      # - name: Install websocket lambda dependencies
      #   working-directory: backend/lambdas/websocket
      #   run: npm ci

      # - name: Lint websocket lambda code
      #   working-directory: backend/lambdas/websocket
      #   run: npm run lint

      - name: Build and package websocket
        working-directory: backend/lambdas/websocket
        run: |
          npm run package
          if [ ! -f websocket-lambda.zip ]; then
            echo "Error: websocket-lambda.zip was not created"
            exit 1
          fi

      - name: Upload websocket lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: websocket-lambda
          path: backend/lambdas/websocket/websocket-lambda.zip
          retention-days: 5

      # OpenAI Lambda
      # - name: Install openai lambda dependencies
      #   working-directory: backend/lambdas/openai
      #   run: npm ci

      # - name: Lint openai lambda code
      #   working-directory: backend/lambdas/openai
      #   run: npm run lint

      - name: Build and package openai
        working-directory: backend/lambdas/openai
        run: |
          npm run package
          if [ ! -f openai-lambda.zip ]; then
            echo "Error: openai-lambda.zip was not created"
            exit 1
          fi

      - name: Upload openai lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: openai-lambda
          path: backend/lambdas/openai/openai-lambda.zip
          retention-days: 5

      # Notion Lambda
      # - name: Install notion lambda dependencies
      #   working-directory: backend/lambdas/notion
      #   run: npm ci

      # - name: Lint notion lambda code
      #   working-directory: backend/lambdas/notion
      #   run: npm run lint

      - name: Build and package notion
        working-directory: backend/lambdas/notion
        run: |
          npm run package
          if [ ! -f notion-lambda.zip ]; then
            echo "Error: notion-lambda.zip was not created"
            exit 1
          fi

      - name: Upload notion lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: notion-lambda
          path: backend/lambdas/notion/notion-lambda.zip
          retention-days: 5

      # Consumer Lambda
      # - name: Install consumer lambda dependencies
      #   working-directory: backend/lambdas/consumer
      #   run: npm ci

      # - name: Lint consumer lambda code
      #   working-directory: backend/lambdas/consumer
      #   run: npm run lint

      - name: Build and package consumer
        working-directory: backend/lambdas/consumer
        run: |
          npm run package
          if [ ! -f consumer-lambda.zip ]; then
            echo "Error: consumer-lambda.zip was not created"
            exit 1
          fi

      - name: Upload consumer lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: consumer-lambda
          path: backend/lambdas/consumer/consumer-lambda.zip
          retention-days: 5

      # Webhook Lambda
      # - name: Install webhook lambda dependencies
      #   working-directory: backend/lambdas/webhook
      #   run: npm ci

      # - name: Lint webhook lambda code
      #   working-directory: backend/lambdas/webhook
      #   run: npm run lint

      - name: Build and package webhook
        working-directory: backend/lambdas/webhook
        run: |
          npm run package
          if [ ! -f webhook-lambda.zip ]; then
            echo "Error: webhook-lambda.zip was not created"
            exit 1
          fi

      - name: Upload webhook lambda artifact
        uses: actions/upload-artifact@v4
        with:
          name: webhook-lambda
          path: backend/lambdas/webhook/webhook-lambda.zip
          retention-days: 5

      # Shared Layer
      - name: Install shared layer dependencies
        working-directory: backend/lambda-layers/shared-layer/nodejs
        run: npm ci

      - name: Package shared layer
        working-directory: backend/lambda-layers/shared-layer
        run: |
          cd nodejs && zip -r ../shared-layer.zip .
          cd .. && if [ ! -f shared-layer.zip ]; then
            echo "Error: shared-layer.zip was not created"
            exit 1
          fi

      - name: Upload shared layer artifact
        uses: actions/upload-artifact@v4
        with:
          name: shared-layer
          path: backend/lambda-layers/shared-layer/shared-layer.zip
          retention-days: 5

  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Shared Layer
      - name: Download shared layer artifact
        uses: actions/download-artifact@v4
        with:
          name: shared-layer
          path: backend/lambda-layers/shared-layer

      # Auth Lambda
      - name: Download Auth Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: auth-lambda
          path: backend/lambdas/auth

      # Connection Lambda
      - name: Download Connection Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: connection-lambda
          path: backend/lambdas/connection

      # User Data Lambda
      - name: Download User Data Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: user-data-lambda
          path: backend/lambdas/user-data

      # Websocket Lambda
      - name: Download Websocket Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: websocket-lambda
          path: backend/lambdas/websocket

      # OpenAI Lambda
      - name: Download OpenAI Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: openai-lambda
          path: backend/lambdas/openai

      # Notion Lambda
      - name: Download Notion Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: notion-lambda
          path: backend/lambdas/notion

      # Consumer Lambda
      - name: Download Consumer Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: consumer-lambda
          path: backend/lambdas/consumer

      # Webhook Lambda
      - name: Download Webhook Lambda artifact
        uses: actions/download-artifact@v4
        with:
          name: webhook-lambda
          path: backend/lambdas/webhook

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        working-directory: terraform/aws
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: terraform/aws
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform/aws
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/aws
        run: |
          terraform plan -out=plan.tfplan

      - name: Terraform Show
        working-directory: terraform/aws
        run: terraform show plan.tfplan

      - name: Terraform Apply
        working-directory: terraform/aws
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve plan.tfplan

  deploy-content:
    name: Deploy Website Content
    needs: infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Update environment variables
        working-directory: frontend
        env:
          BACKEND_URL: ${{ secrets.BACKEND_URL }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: node scripts/update-env.js

      - name: Build Angular application
        working-directory: frontend
        env:
          API_URL: ${{ secrets.API_URL }}
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync frontend/dist/frontend/browser s3://${{ env.TF_VAR_bucket-name }}/ \
            --delete \
            --cache-control "max-age=3600"

  # destroy:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Install jq
  #       run: sudo apt-get install -y jq

  #     - name: Clean up S3 bucket
  #       run: |
  #         chmod +x scripts/cleanup.sh
  #         source scripts/cleanup.sh
  #         delete_s3_bucket "${{ env.TF_VAR_bucket-name }}"

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.5.0"

  #     - name: Terraform Init
  #       run: terraform -chdir=terraform init

  #     - name: Terraform Destroy
  #       run: terraform -chdir=terraform destroy -auto-approve 