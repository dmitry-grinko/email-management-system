name: GCP Pipeline

on:
  push:
    paths:
      - 'terraform/gcp/**'
  workflow_dispatch:

env:
  TF_VAR_GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

permissions:
  id-token: write
  contents: read

jobs:
  infrastructure:
    name: Deploy GCP Infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract variables from credentials
        run: |
          # Check if GOOGLE_APPLICATION_CREDENTIALS exists
          if [ -z "$TF_VAR_GOOGLE_APPLICATION_CREDENTIALS" ]; then
            echo "Error: GOOGLE_APPLICATION_CREDENTIALS environment variable is not set"
            exit 1
          fi
          
          # Verify the credentials JSON is valid
          if ! echo "$TF_VAR_GOOGLE_APPLICATION_CREDENTIALS" | jq -e . >/dev/null 2>&1; then
            echo "Error: GOOGLE_APPLICATION_CREDENTIALS is not valid JSON"
            exit 1
          fi
          
          # Extract project ID and service account email from credentials
          project_id=$(echo $TF_VAR_GOOGLE_APPLICATION_CREDENTIALS | jq -r .project_id)
          service_account_email=$(echo $TF_VAR_GOOGLE_APPLICATION_CREDENTIALS | jq -r .client_email)
          
          # Verify extracted values
          if [ -z "$project_id" ]; then
            echo "Error: project_id not found in credentials"
            exit 1
          fi
          if [ -z "$service_account_email" ]; then
            echo "Error: client_email not found in credentials"
            exit 1
          fi
          
          # Set and export variables to GITHUB_ENV
          {
            echo "TF_VAR_project_id=$project_id"
            echo "TF_VAR_service_account_email=$service_account_email"
            echo "TF_VAR_region=us-central1"
            echo "TF_VAR_pubsub_topic_name=${project_id}-topic"
            echo "TF_VAR_pubsub_subscription_name=${project_id}-subscription"
            echo "TF_VAR_oauth_client_name=${project_id}-oauth-client"
          } >> $GITHUB_ENV
          
          echo "Project ID: $project_id"
          echo "Service Account: $service_account_email"
          echo "Region: us-central1"
          echo "Topic Name: ${project_id}-topic"
          echo "Subscription Name: ${project_id}-subscription"
          echo "OAuth Client Name: ${project_id}-oauth-client"

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ env.TF_VAR_project_id }}

      - name: Create terraform.tfvars
        working-directory: terraform/gcp
        run: |
          cat > terraform.tfvars << EOF
          project_id = "${{ env.TF_VAR_project_id }}"
          region = "${{ env.TF_VAR_region }}"
          service_account_email = "${{ env.TF_VAR_service_account_email }}"
          pubsub_topic_name = "${{ env.TF_VAR_pubsub_topic_name }}"
          pubsub_subscription_name = "${{ env.TF_VAR_pubsub_subscription_name }}"
          oauth_client_name = "${{ env.TF_VAR_oauth_client_name }}"
          EOF
          echo "=== Contents of terraform.tfvars ==="
          cat terraform.tfvars
          echo "=================================="
          echo "Checking if all required variables are set:"
          # Check if variables have non-empty values
          project_id=$(grep "project_id" terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
          region=$(grep "region" terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
          service_account_email=$(grep "service_account_email" terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
          pubsub_topic_name=$(grep "pubsub_topic_name" terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
          pubsub_subscription_name=$(grep "pubsub_subscription_name" terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
          oauth_client_name=$(grep "oauth_client_name" terraform.tfvars | cut -d'=' -f2 | tr -d ' "')
          
          [ ! -z "$project_id" ] && echo "✓ project_id is set to: $project_id" || echo "✗ project_id is empty"
          [ ! -z "$region" ] && echo "✓ region is set to: $region" || echo "✗ region is empty"
          [ ! -z "$service_account_email" ] && echo "✓ service_account_email is set to: $service_account_email" || echo "✗ service_account_email is empty"
          [ ! -z "$pubsub_topic_name" ] && echo "✓ pubsub_topic_name is set to: $pubsub_topic_name" || echo "✗ pubsub_topic_name is empty"
          [ ! -z "$pubsub_subscription_name" ] && echo "✓ pubsub_subscription_name is set to: $pubsub_subscription_name" || echo "✗ pubsub_subscription_name is empty"
          [ ! -z "$oauth_client_name" ] && echo "✓ oauth_client_name is set to: $oauth_client_name" || echo "✗ oauth_client_name is empty"
          
          # Exit if any required variable is empty
          if [ -z "$project_id" ] || [ -z "$region" ] || [ -z "$service_account_email" ]; then
            echo "Error: Required variables are empty"
            exit 1
          fi

      - name: Remove State Lock
        run: |
          gsutil rm gs://email-mamagement-app-tf-state-bucket/terraform/state/default.tflock || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        working-directory: terraform/gcp
        run: terraform fmt -check -recursive *.tf

      - name: Terraform Init
        working-directory: terraform/gcp
        run: |
          terraform init -var-file=terraform.tfvars
          echo "=== Provider Configuration ==="
          terraform providers
          echo "==========================="

      - name: Terraform Validate
        working-directory: terraform/gcp
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/gcp
        run: |
          rm -f plan.tfplan
          terraform plan -var-file=terraform.tfvars -lock=false -out=plan.tfplan

      - name: Terraform Show
        working-directory: terraform/gcp
        run: terraform show plan.tfplan

      - name: Terraform Apply
        working-directory: terraform/gcp
        if: github.ref == 'refs/heads/main'
        run: terraform apply -var-file=terraform.tfvars -lock=false -auto-approve plan.tfplan

      - name: Save OAuth Credentials
        if: github.ref == 'refs/heads/main'
        working-directory: terraform/gcp
        run: |
          echo "GOOGLE_CLIENT_ID=$(terraform output -raw oauth_client_id)" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=$(terraform output -raw oauth_client_secret)" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_TOPIC_NAME=$(terraform output -raw pubsub_topic_id)" >> $GITHUB_ENV

  # destroy:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.5.0"

  #     - name: Terraform Init
  #       run: terraform -chdir=terraform/gcp init

  #     - name: Terraform Destroy
  #       run: terraform -chdir=terraform/gcp destroy -auto-approve
