name: GCP Pipeline

on:
  push:
    paths:
      - 'terraform/gcp/**'
  workflow_dispatch:

env:
  TF_VAR_GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

permissions:
  id-token: write
  contents: read

jobs:
  infrastructure:
    name: Deploy GCP Infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract variables from credentials
        run: |
          # Extract project ID and service account email from credentials
          export TF_VAR_project_id=$(echo $TF_VAR_GOOGLE_APPLICATION_CREDENTIALS | jq -r .project_id)
          export TF_VAR_service_account_email=$(echo $TF_VAR_GOOGLE_APPLICATION_CREDENTIALS | jq -r .client_email)
          # Set default region and resource names
          export TF_VAR_region="us-central1"
          export TF_VAR_pubsub_topic_name="${TF_VAR_project_id}-topic"
          export TF_VAR_pubsub_subscription_name="${TF_VAR_project_id}-subscription"
          export TF_VAR_oauth_client_name="${TF_VAR_project_id}-oauth-client"
          
          echo "Project ID: $TF_VAR_project_id"
          echo "Service Account: $TF_VAR_service_account_email"
          echo "Region: $TF_VAR_region"
          echo "Topic Name: $TF_VAR_pubsub_topic_name"
          echo "Subscription Name: $TF_VAR_pubsub_subscription_name"
          echo "OAuth Client Name: $TF_VAR_oauth_client_name"

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ env.TF_VAR_project_id }}

      - name: Create terraform.tfvars
        working-directory: terraform/gcp
        run: |
          cat > terraform.tfvars << EOF
          project_id = "${{ env.TF_VAR_project_id }}"
          region = "${{ env.TF_VAR_region }}"
          service_account_email = "${{ env.TF_VAR_service_account_email }}"
          pubsub_topic_name = "${{ env.TF_VAR_pubsub_topic_name }}"
          pubsub_subscription_name = "${{ env.TF_VAR_pubsub_subscription_name }}"
          oauth_client_name = "${{ env.TF_VAR_oauth_client_name }}"
          EOF
          echo "=== Contents of terraform.tfvars ==="
          cat terraform.tfvars
          echo "=================================="
          echo "Checking if all required variables are set:"
          grep -q "project_id" terraform.tfvars && echo "✓ project_id is set" || echo "✗ project_id is missing"
          grep -q "region" terraform.tfvars && echo "✓ region is set" || echo "✗ region is missing"
          grep -q "service_account_email" terraform.tfvars && echo "✓ service_account_email is set" || echo "✗ service_account_email is missing"
          grep -q "pubsub_topic_name" terraform.tfvars && echo "✓ pubsub_topic_name is set" || echo "✗ pubsub_topic_name is missing"
          grep -q "pubsub_subscription_name" terraform.tfvars && echo "✓ pubsub_subscription_name is set" || echo "✗ pubsub_subscription_name is missing"
          grep -q "oauth_client_name" terraform.tfvars && echo "✓ oauth_client_name is set" || echo "✗ oauth_client_name is missing"

      - name: Remove State Lock
        run: |
          gsutil rm gs://email-mamagement-app-tf-state-bucket/terraform/state/default.tflock || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        working-directory: terraform/gcp
        run: terraform fmt -check -recursive *.tf

      - name: Terraform Init
        working-directory: terraform/gcp
        run: |
          terraform init -var-file=terraform.tfvars
          echo "=== Provider Configuration ==="
          terraform providers
          echo "==========================="

      - name: Terraform Validate
        working-directory: terraform/gcp
        run: terraform validate -var-file=terraform.tfvars

      - name: Terraform Plan
        working-directory: terraform/gcp
        run: |
          rm -f plan.tfplan
          terraform plan -var-file=terraform.tfvars -lock=false -out=plan.tfplan

      - name: Terraform Show
        working-directory: terraform/gcp
        run: terraform show plan.tfplan

      - name: Terraform Apply
        working-directory: terraform/gcp
        if: github.ref == 'refs/heads/main'
        run: terraform apply -var-file=terraform.tfvars -lock=false -auto-approve plan.tfplan

      - name: Save OAuth Credentials
        if: github.ref == 'refs/heads/main'
        working-directory: terraform/gcp
        run: |
          echo "GOOGLE_CLIENT_ID=$(terraform output -raw oauth_client_id)" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=$(terraform output -raw oauth_client_secret)" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_TOPIC_NAME=$(terraform output -raw pubsub_topic_id)" >> $GITHUB_ENV

  # destroy:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.5.0"

  #     - name: Terraform Init
  #       run: terraform -chdir=terraform/gcp init

  #     - name: Terraform Destroy
  #       run: terraform -chdir=terraform/gcp destroy -auto-approve
